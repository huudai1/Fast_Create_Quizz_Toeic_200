// File: public/AIrecognize.js
let lastAiResult = null;
// H√†m hi·ªÉn th·ªã c·ª≠a s·ªï pop-up (modal) c·ªßa AI
function showAiModal(quizType = 'toeic') { // M·∫∑c ƒë·ªãnh l√† 'toeic'
    const modal = document.getElementById('ai-recognize-modal');
    if (modal) {
        // --- Reset tr·∫°ng th√°i c·ªßa modal ---
        document.getElementById('ai-file-input').value = ''; // X√≥a file c≈©
        document.getElementById('ai-status').textContent = ''; // X√≥a th√¥ng b√°o c≈©
        document.getElementById('ai-result-container').classList.add('hidden'); // ·∫®n k·∫øt qu·∫£ c≈©

        // --- L·∫•y n√∫t "B·∫Øt ƒë·∫ßu nh·∫≠n di·ªán" B√äN TRONG modal ---
        const recognizeButton = modal.querySelector('button[onclick^="handle"]'); // T√¨m n√∫t c√≥ onclick b·∫Øt ƒë·∫ßu b·∫±ng "handle"

        // --- QUAN TR·ªåNG: G√°n ƒê√öNG h√†m x·ª≠ l√Ω cho n√∫t ƒë√≥ ---
        if (quizType === 'custom') {
            // N·∫øu l√† ƒë·ªÅ t√πy ch·ªânh, khi b·∫•m n√∫t "B·∫Øt ƒë·∫ßu" s·∫Ω g·ªçi handleCustomAiRecognition
            recognizeButton.onclick = handleCustomAiRecognition;
            // V√† hi·ªÉn th·ªã giao di·ªán ban ƒë·∫ßu ph√π h·ª£p (ch·ªâ 1 √¥ l·ªõn v√† n√∫t Copy All)
            displayAiResults({}, true); // G·ªçi v·ªõi data r·ªóng, isCustom = true
        } else { // M·∫∑c ƒë·ªãnh l√† TOEIC
            // N·∫øu l√† ƒë·ªÅ TOEIC, khi b·∫•m n√∫t "B·∫Øt ƒë·∫ßu" s·∫Ω g·ªçi handleAiRecognition
            recognizeButton.onclick = handleAiRecognition;
            // V√† hi·ªÉn th·ªã giao di·ªán ban ƒë·∫ßu cho TOEIC (7 √¥ parts)
            displayAiResults({}, false); // G·ªçi v·ªõi data r·ªóng, isCustom = false
        }
        // --------------------------------------------------

        modal.classList.remove('hidden'); // Hi·ªÉn th·ªã modal
    }
}

// H√†m ƒë√≥ng c·ª≠a s·ªï pop-up
function closeAiModal() {
    const modal = document.getElementById('ai-recognize-modal');
    if (modal) modal.classList.add('hidden');
}

// H√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn file v√† b·∫•m n√∫t "Nh·∫≠n di·ªán"
async function handleAiRecognition(totalQuestions = null) {
    const fileInput = document.getElementById('ai-file-input');
    const statusElement = document.getElementById('ai-status');
    const resultContainer = document.getElementById('ai-result-container');

    if (fileInput.files.length === 0) {
        statusElement.textContent = 'Vui l√≤ng ch·ªçn m·ªôt ho·∫∑c nhi·ªÅu file ·∫£nh/PDF.';
        statusElement.className = 'text-red-500';
        return;
    }

    const formData = new FormData();
    for (const file of fileInput.files) {
        formData.append('answer_files', file);
    }

    if (totalQuestions) {
        formData.append('totalQuestions', totalQuestions);
    }

    // Reset tr·∫°ng th√°i tr∆∞·ªõc khi g·ª≠i y√™u c·∫ßu m·ªõi
    lastAiResult = null;
    statusElement.textContent = 'ƒêang ph√¢n t√≠ch, vui l√≤ng ch·ªù...';
    statusElement.className = 'text-blue-500';
    resultContainer.classList.add('hidden');

    try {
        const res = await fetch('/recognize-answers', {
            method: 'POST',
            body: formData,
        });

        const result = await res.json();

        if (!res.ok) {
            throw new Error(result.message || 'L·ªói t·ª´ server');
        }
        
        // L∆ØU K·∫æT QU·∫¢ V√ÄO BI·∫æN L∆ØU TR·ªÆ
        lastAiResult = result;
        
        statusElement.textContent = 'ƒê√£ nh·∫≠n di·ªán th√†nh c√¥ng! Vui l√≤ng sao ch√©p v√† d√°n v√†o c√°c √¥ ƒë√°p √°n.';
        statusElement.className = 'text-green-500';
        displayAiResults(result);

    } catch (error) {
        console.error('Error during AI recognition:', error);
        statusElement.textContent = `L·ªói: ${error.message}`;
        statusElement.className = 'text-red-500';
    }
}

// H√†m hi·ªÉn th·ªã k·∫øt qu·∫£ AI tr·∫£ v·ªÅ ra 7 √¥ text
function displayAiResults(data, isCustom) {
    const resultContainer = document.getElementById('ai-result-container');
    const copyAllButton = document.querySelector('#ai-result-container button[onclick="copyAllAiAnswers()"]');

    // L·∫•y t·∫•t c·∫£ c√°c div ch·ª©a Part 1-7 v√† n√∫t copy c·ªßa ch√∫ng
    const partDivs = [];
    for (let i = 1; i <= 7; i++) {
        const partDiv = document.getElementById(`ai-result-part${i}`)?.closest('.flex'); // T√¨m div cha
        if (partDiv) {
            partDivs.push(partDiv);
        }
    }

    if (isCustom && data.answers) {
        // --- HI·ªÇN TH·ªä CHO ƒê·ªÄ T√ôY CH·ªàNH ---
        // ·∫®n c√°c part 2-7
        partDivs.forEach((div, index) => {
            if (index > 0) { // B·ªè qua part 1
                div.classList.add('hidden');
            } else {
                 div.classList.remove('hidden'); // ƒê·∫£m b·∫£o part 1 hi·ªán
                 // C·∫≠p nh·∫≠t label v√† textarea c·ªßa part 1
                 const label = div.querySelector('label');
                 const textarea = div.querySelector('textarea');
                 const copyButton = div.querySelector('button');
                 if(label) label.textContent = `T·∫•t c·∫£ (${data.answers.split(',').length} c√¢u):`;
                 if(textarea) textarea.value = data.answers;
                 if(copyButton) copyButton.classList.add('hidden'); // ·∫®n n√∫t copy ri√™ng c·ªßa part 1
            }
        });

        // Hi·ªán n√∫t "Copy All"
        if (copyAllButton) copyAllButton.classList.remove('hidden');

    } else if (!isCustom && data.part1 !== undefined) {
        // --- HI·ªÇN TH·ªä CHO ƒê·ªÄ TOEIC ---
        // Hi·ªán t·∫•t c·∫£ c√°c part 1-7 v√† ƒëi·ªÅn d·ªØ li·ªáu
        partDivs.forEach((div, index) => {
            const partNum = index + 1;
            div.classList.remove('hidden');
            const label = div.querySelector('label');
            const textarea = div.querySelector('textarea');
            const copyButton = div.querySelector('button');

            if(label) label.textContent = `Part ${partNum}:`; // ƒê·∫∑t l·∫°i label
            if(textarea) textarea.value = data[`part${partNum}`] || '';
            if(copyButton) copyButton.classList.remove('hidden'); // Hi·ªán n√∫t copy ri√™ng
        });

        // ·∫®n n√∫t "Copy All"
        if (copyAllButton) copyAllButton.classList.add('hidden');

    } else {
        // Tr∆∞·ªùng h·ª£p l·ªói ho·∫∑c d·ªØ li·ªáu kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng
        console.error("D·ªØ li·ªáu AI tr·∫£ v·ªÅ kh√¥ng h·ª£p l·ªá:", data);
        document.getElementById('ai-status').textContent = 'L·ªói: D·ªØ li·ªáu AI tr·∫£ v·ªÅ kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng.';
        document.getElementById('ai-status').className = 'text-center font-medium text-red-500';
        resultContainer.classList.add('hidden'); // ·∫®n lu√¥n k·∫øt qu·∫£
        return; // D·ª´ng h√†m
    }

    // Hi·ªÉn th·ªã container ch·ª©a k·∫øt qu·∫£
    resultContainer.classList.remove('hidden');
}

// H√†m helper ƒë·ªÉ sao ch√©p n·ªôi dung v√†o clipboard
function copyAnswer(partNumber) {
    const textArea = document.getElementById(`ai-result-part${partNumber}`);
    if (textArea && textArea.value) {
        navigator.clipboard.writeText(textArea.value).then(() => {
            // C√≥ th·ªÉ th√™m hi·ªáu ·ª©ng th√¥ng b√°o "ƒê√£ sao ch√©p!" ·ªü ƒë√¢y n·∫øu mu·ªën
            alert(`ƒê√£ sao ch√©p ƒë√°p √°n Part ${partNumber}`);
        }).catch(err => {
            console.error('Failed to copy text: ', err);
        });
    }
}

function copyAllAiAnswers() {
    const textarea = document.getElementById('ai-result-part1');
    if (textarea && textarea.value) {
        navigator.clipboard.writeText(textarea.value)
            .then(() => {
                alert('ƒê√£ sao ch√©p t·∫•t c·∫£ ƒë√°p √°n!');
            })
            .catch(err => {
                console.error('L·ªói khi sao ch√©p:', err);
                alert('Kh√¥ng th·ªÉ sao ch√©p t·ª± ƒë·ªông. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c sao ch√©p th·ªß c√¥ng.');
            });
    } else {
        alert('Kh√¥ng c√≥ n·ªôi dung ƒë·ªÉ sao ch√©p.');
    }
}

async function handleCustomAiRecognition() {
    // L·∫•y ƒë√∫ng input file t·ª´ modal AI
    const fileInput = document.getElementById('ai-file-input');
    const files = fileInput.files;
    const statusEl = document.getElementById('ai-status');
    const resultContainer = document.getElementById('ai-result-container');
    const recognizeButton = document.querySelector('#ai-recognize-modal button[onclick^="handle"]'); // L·∫•y n√∫t "B·∫Øt ƒë·∫ßu"

    if (!files || files.length === 0) {
        statusEl.textContent = 'Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt file ·∫£nh ho·∫∑c PDF.';
        statusEl.className = 'text-center font-medium text-red-500';
        return;
    }
    // L·∫•y totalQuestions ƒë√£ l∆∞u khi admin nh·∫≠p ·ªü B∆∞·ªõc 1
    if (!customQuizTotalQuestions || customQuizTotalQuestions <= 0) {
         statusEl.textContent = 'L·ªói: Kh√¥ng t√¨m th·∫•y t·ªïng s·ªë c√¢u. Vui l√≤ng quay l·∫°i B∆∞·ªõc 1.';
         statusEl.className = 'text-center font-medium text-red-500';
         return;
    }


    statusEl.textContent = 'ƒêang nh·∫≠n di·ªán, vui l√≤ng ƒë·ª£i... üß†';
    statusEl.className = 'text-center font-medium text-blue-600';
    resultContainer.classList.add('hidden');
    recognizeButton.disabled = true; // V√¥ hi·ªáu h√≥a n√∫t

    const formData = new FormData();
    for (let i = 0; i < files.length; i++) {
        formData.append('answer_files', files[i]);
    }
    // ---- TH√äM totalQuestions V√ÄO FORMDATA ----
    formData.append('totalQuestions', customQuizTotalQuestions);
    // ------------------------------------------

    try {
        const response = await fetch('/recognize-answers', {
            method: 'POST',
            body: formData,
        });

        if (!response.ok) {
            const errorData = await response.json().catch(() => ({})); // C·ªë g·∫Øng ƒë·ªçc l·ªói JSON
            throw new Error(errorData.message || `L·ªói server: ${response.status}`);
        }

        const data = await response.json();

        // --- G·ªçi h√†m hi·ªÉn th·ªã k·∫øt qu·∫£ (s·∫Ω s·ª≠a ·ªü b∆∞·ªõc c) ---
        displayAiResults(data, true); // Th√™m c·ªù true ƒë·ªÉ bi·∫øt ƒë√¢y l√† Custom Quiz
        // ----------------------------------------------------

        statusEl.textContent = 'Nh·∫≠n di·ªán th√†nh c√¥ng! ‚úÖ';
        statusEl.className = 'text-center font-medium text-green-600';

    } catch (error) {
        console.error('AI Recognition Error:', error);
        statusEl.textContent = `L·ªói: ${error.message}`;
        statusEl.className = 'text-center font-medium text-red-500';
    } finally {
        recognizeButton.disabled = false; // K√≠ch ho·∫°t l·∫°i n√∫t
         // C√¢n nh·∫Øc x√≥a file ƒë√£ ch·ªçn: fileInput.value = '';
    }
}

async function handleAiRecognition() {
    const fileInput = document.getElementById('ai-file-input');
    const files = fileInput.files;
    const statusEl = document.getElementById('ai-status');
    const resultContainer = document.getElementById('ai-result-container');
    const recognizeButton = document.querySelector('#ai-recognize-modal button[onclick^="handle"]');

    if (!files || files.length === 0) {
        statusEl.textContent = 'Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt file ·∫£nh ho·∫∑c PDF.';
        statusEl.className = 'text-center font-medium text-red-500';
        return;
    }

    statusEl.textContent = 'ƒêang nh·∫≠n di·ªán, vui l√≤ng ƒë·ª£i... üß†';
    statusEl.className = 'text-center font-medium text-blue-600';
    resultContainer.classList.add('hidden');
    recognizeButton.disabled = true;

    const formData = new FormData();
    for (let i = 0; i < files.length; i++) {
        formData.append('answer_files', files[i]);
    }
    // KH√îNG th√™m totalQuestions cho TOEIC

    try {
        const response = await fetch('/recognize-answers', {
            method: 'POST',
            body: formData,
        });

        if (!response.ok) {
            const errorData = await response.json().catch(() => ({}));
            throw new Error(errorData.message || `L·ªói server: ${response.status}`);
        }

        const data = await response.json();
        // --- G·ªçi h√†m hi·ªÉn th·ªã k·∫øt qu·∫£ ---
        displayAiResults(data, false); // C·ªù false cho TOEIC
        // ---------------------------------

        statusEl.textContent = 'Nh·∫≠n di·ªán th√†nh c√¥ng! ‚úÖ';
        statusEl.className = 'text-center font-medium text-green-600';

    } catch (error) {
        console.error('AI Recognition Error:', error);
        statusEl.textContent = `L·ªói: ${error.message}`;
        statusEl.className = 'text-center font-medium text-red-500';
    } finally {
        recognizeButton.disabled = false;
    }
}